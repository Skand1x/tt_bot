import os
import dotenv
import telebot
import datetime
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
from dotenv import load_dotenv, find_dotenv
from telebot import types
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update

con = sqlite3.connect('tt.db', check_same_thread=False)
cur = con.cursor()
db_connection = sqlite3.connect('tt.db')

load_dotenv(find_dotenv())

 
bot = telebot.TeleBot(os.getenv('TG_KEY'))

@bot.message_handler(commands=['start'])
def welcome(message):
        sticker = open('E:/TimeTracker-by-Klim/Welcome.webp', 'rb')
        bot.send_sticker(message.chat.id, sticker)

        # –≥–ª –∫–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Item1 = types.KeyboardButton("üë®‚Äçüíª–†–∞–±–æ—Ç–∞")
        Item2 = types.KeyboardButton("ü•π–û—Ç–¥—ã—Ö")
        Item3 = types.KeyboardButton("üò¥–°–æ–Ω")
        Item4 = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

        markup.add(Item1, Item2, Item3, Item4)

        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –≤—Ä–µ–º–µ–Ω–µ–º. –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—É, –æ—Ç–¥—ã—Ö –∏ —Å–æ–Ω, –∏ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.".format(message.from_user, bot.get_me()),
            parse_mode='html', reply_markup=markup)
# –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@bot.message_handler(content_types=['text'])
def callback_inline(message):
        if message.chat.type == 'private':
                if message.text == 'üë®‚Äçüíª–†–∞–±–æ—Ç–∞':
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        Item5 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å :(", callback_data='start_work')
                        Item6 = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å :)", callback_data='end_work')

                        markup.add(Item5, Item6)

                        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)


                elif message.text == 'ü•π–û—Ç–¥—ã—Ö':
                
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        Item7 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –û—Ç–¥—ã—Ö–∞—Ç—å :)", callback_data='start_relax')
                        Item8 = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –û—Ç–¥—ã—Ö–∞—Ç—å :(", callback_data='end_relax')

                        markup.add(Item7, Item8)

                        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)

                
                elif message.text == 'üò¥–°–æ–Ω':
                
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        Item9 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –°–æ–Ω :)", callback_data='start_sleep')
                        Item10 = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –°–æ–Ω :(", callback_data='end_sleep')

                        markup.add(Item9, Item10)

                        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)
                
                elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É':
                
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        Item11 = types.InlineKeyboardButton("‚û°Ô∏è–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", callback_data='show_analytics')
                        Item12 = types.InlineKeyboardButton("–ø–æ–∫–∞ –ø—É—Å—Ç—ã—à–∫–∞", callback_data='lol')

                        markup.add(Item11, Item12)

                        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)
                
# –ö–æ–¥ –¥–ª—è –∑–∞–Ω–æ—Å–∞ –≤ –±–¥
@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
        chat_id = call.message.chat.id
        user_id = call.message.from_user.id
        # –†–∞–±–æ—Ç–∞
        if call.data == 'start_work':

                # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                start_time = datetime.datetime.now()
                task_name = '–†–∞–±–æ—Ç–∞'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                
                cur.execute("INSERT INTO work_time_logs (task_name, start_time, user_id) VALUES (?, ?, ?)", (task_name, start_time, user_id))
                con.commit()
                
                bot.send_message(chat_id, "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å :)'.")

        elif call.data == 'end_work':

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cur.execute("SELECT * FROM work_time_logs WHERE user_id = ? AND end_time IS NULL", (user_id,))
                last_record = cur.fetchone()
                if last_record is None:
                        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
                        return

                # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                end_time = datetime.datetime.now()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
                duration_seconds = int((end_time - datetime.datetime.strptime(last_record[3], '%Y-%m-%d %H:%M:%S.%f')).total_seconds())
                hours, remainder = divmod(duration_seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                duration = f"{hours:02}:{minutes:02}:{seconds:02}"

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                cur.execute("UPDATE work_time_logs SET end_time=?, duration=? WHERE id=?", (end_time, duration, last_record[0]))
                con.commit()
                
                bot.send_message(chat_id, f"–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration}")

        # –û—Ç–¥—ã—Ö
        if call.data == 'start_relax':

                # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                start_time = datetime.datetime.now()
                task_name = '–û—Ç–¥—ã—Ö'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                
                cur.execute("INSERT INTO relax_time_logs (task_name, start_time, user_id) VALUES (?, ?, ?)", (task_name, start_time, user_id))
                con.commit()
                
                bot.send_message(chat_id, "–û—Ç–¥—ã—Ö –Ω–∞—á–∞–ª—Å—è. –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–æ–Ω—á–∏—Ç—å –û—Ç–¥—ã—Ö–∞—Ç—å :('.")

        elif call.data == 'end_relax':

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cur.execute("SELECT * FROM relax_time_logs WHERE user_id = ? AND end_time IS NULL", (user_id,))
                last_record = cur.fetchone()
                if last_record is None:
                        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
                        return

                # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                end_time = datetime.datetime.now()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
                duration_seconds = int((end_time - datetime.datetime.strptime(last_record[3], '%Y-%m-%d %H:%M:%S.%f')).total_seconds())
                hours, remainder = divmod(duration_seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                duration = f"{hours:02}:{minutes:02}:{seconds:02}"
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                cur.execute("UPDATE relax_time_logs SET end_time=?, duration=? WHERE id=?", (end_time, duration, last_record[0]))
                con.commit()
                
                bot.send_message(chat_id, f"–û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: {duration} —Å–µ–∫—É–Ω–¥.")

        # –°–æ–Ω
        if call.data == 'start_sleep':

                # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                start_time = datetime.datetime.now()
                task_name = '–°–æ–Ω'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                
                cur.execute("INSERT INTO sleep_time_logs (task_name, start_time, user_id) VALUES (?, ?, ?)", (task_name, start_time, user_id))
                con.commit()
                
                bot.send_message(chat_id, "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏. –ö–æ–≥–¥–∞ –ø—Ä–æ—Å–Ω–µ—Ç–µ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–æ–Ω—á–∏—Ç—å –°–æ–Ω :('.")

        elif call.data == 'end_sleep':

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cur.execute("SELECT * FROM sleep_time_logs WHERE user_id = ? AND end_time IS NULL", (user_id,))
                last_record = cur.fetchone()
                if last_record is None:
                        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
                        return

                # –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                end_time = datetime.datetime.now()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
                duration_seconds = int((end_time - datetime.datetime.strptime(last_record[3], '%Y-%m-%d %H:%M:%S.%f')).total_seconds())
                hours, remainder = divmod(duration_seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                duration = f"{hours:02}:{minutes:02}:{seconds:02}"
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                cur.execute("UPDATE sleep_time_logs SET end_time=?, duration=? WHERE id=?", (end_time, duration, last_record[0]))
                con.commit()
                
                bot.send_message(chat_id, f"–°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è —Å–Ω–∞: {duration} —Å–µ–∫—É–Ω–¥.")

# –∑–∞–∫—Ä—ã—Ç—å –±–¥
#con.close()


# –ê–ù–ê–õ–ò–¢–ò–ö–ê –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
'''
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == 'show_analytics')
def show_analytics_handler(call):
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    analytics = get_user_analytics(user_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    create_time_chart(analytics, user_id)

def get_user_analytics(user_id):
    # –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ç—Ä–µ—Ö —Ç–∞–±–ª–∏—Ü
    query = """
    SELECT task_name, SUM(duration) AS total_duration
    FROM (
        SELECT 'work' AS task_name, duration FROM work_time_logs WHERE user_id=?
        UNION ALL
        SELECT 'relax' AS task_name, duration FROM relax_time_logs WHERE user_id=?
        UNION ALL
        SELECT 'sleep' AS task_name, duration FROM sleep_time_logs WHERE user_id=?
    )
    GROUP BY task_name
    """
    df = pd.read_sql_query(query, db_connection, params=(user_id, user_id, user_id))

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç datetime
    df['duration'] = pd.to_timedelta(df['duration'])

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    analytics = df.groupby('task_name').sum()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —á—á:–º–º:—Å—Å
    analytics['duration'] = analytics['duration'].dt.total_seconds().apply(lambda x: '{:02d}:{:02d}:{:02d}'.format(*divmod(int(x), 60**2, 60)))
    
    return analytics

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def create_time_chart(analytics, user_id):
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    ax.bar(analytics.index, analytics['duration'])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
    ax.set_xlabel('Task Type')
    ax.set_ylabel('Total Duration')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_title('Time Analytics')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª
    chart_filename = f'time_analytics_{user_id}.png'
    fig.savefig(chart_filename)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_photo(chat_id=user_id, photo=open(chart_filename, 'rb'))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    os.remove(chart_filename)
'''

@bot.callback_query_handler(func=lambda call: call.data == 'show_analytics')
def show_analytics_handler(call):
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    analytics = get_user_analytics(user_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    create_time_chart(analytics, user_id)

def get_user_analytics(user_id):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—Ç—ã
    work_data = pd.read_sql_query(f"SELECT duration FROM work_time_logs WHERE user_id={user_id}", db_connection)
    work_duration = sum(work_data['duration'].apply(parse_duration).astype(int))

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–¥—ã—Ö–∞
    relax_data = pd.read_sql_query(f"SELECT duration FROM relax_time_logs WHERE user_id={user_id}", db_connection)
    relax_duration = sum(relax_data['duration'].apply(parse_duration).astype(int))

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–Ω–∞
    sleep_data = pd.read_sql_query(f"SELECT duration FROM sleep_time_logs WHERE user_id={user_id}", db_connection)
    sleep_duration = sum(sleep_data['duration'].apply(parse_duration).astype(int))

  # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    df = pd.DataFrame({
        'Task Type': ['Work', 'Relax', 'Sleep'],
        'Total Duration': [work_duration, relax_duration, sleep_duration]
    })

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
    df['Formatted Duration'] = df['Total Duration'].apply(format_duration)

    return df

def parse_duration(duration):
    parts = duration.split(':')
    hours = int(parts[0])
    minutes = int(parts[1])
    seconds = int(parts[2])
    total_seconds = hours * 3600 + minutes * 60 + seconds
    return total_seconds

def format_duration(duration):
    hours = duration // 3600
    minutes = (duration % 3600) // 60
    seconds = duration % 60
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def create_time_chart(analytics, user_id):
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    ax.bar(analytics['Task Type'], analytics['Total Duration'])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
    ax.set_xlabel('Task Type')
    ax.set_ylabel('Total Duration')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_title('Time Analytics')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª
    chart_filename = f'time_analytics_{user_id}.png'
    fig.savefig(chart_filename)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(chart_filename, 'rb') as photo:
        bot.send_photo(chat_id=user_id, photo=photo)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        os.remove(chart_filename)

#RUN
bot.polling()